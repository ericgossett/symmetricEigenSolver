"""
Example for the H2 molecule. Here H is the hamiltonian of the final SCF
interation while A is the canonical transformation matrix. This
calculation was run using pyQuante 1.6.5

The resuling eigenvalues refer to the molecular orbital energies while the
eigenvectors are the molecular orbitals.

USEAGE:
    python h2.py
"""
import sys
sys.path.append('../')
import symmetricEigenSolver as sym
import numpy as np
np.set_printoptions(linewidth=500)

# Hamiltonian for H2
H = np.array(
    [
        [-0.0372004128677, -0.640542854992, 0.0, 0.0, 0.256010272981, -0.355092775341, 0.154062840814, 0.0, 0.0, -0.254201683873],
        [-0.640542854992, 0.555072755579, 0.0, 0.0, 0.0758740141453, -0.0194580359375, -0.195320145417, 0.0, 0.0, 0.222608887781],
        [0.0, 0.0, 2.27848358395, 0.0, 0.0, 0.0, 0.0, -0.459656319322, 0.0, 0.0],
        [0.0, 0.0, 0.0, 2.27848358395, 0.0, 0.0, 0.0, 0.0, -0.459656319322, 0.0],
        [0.256010272981, 0.0758740141453, 0.0, 0.0, 2.04256698916, 1.14581332012, 0.166613677422, 0.0, 0.0, 0.346785511939],
        [-0.355092775341, -0.0194580359375, 0.0, 0.0, 1.14581332012, 1.56083432695, -0.496439216289, 0.0, 0.0, 0.569082835103],
        [0.154062840814, -0.195320145417, 0.0, 0.0, 0.166613677422, -0.496439216289, 0.675230270787, 0.0, 0.0, -0.304990361608],
        [0.0, 0.0, -0.459656319322, 0.0, 0.0, 0.0, 0.0, 2.62031989161, 0.0, 0.0],
        [0.0, 0.0, 0.0, -0.459656319322, 0.0, 0.0, 0.0, 0.0, 2.62031989161, 0.0],
        [-0.254201683873, 0.222608887781, 0.0, 0.0, 0.346785511939, 0.569082835103, -0.304990361608, 0.0, 0.0, 4.22787680605]
    ],
    dtype=np.double
)

val, vec = sym.getEig(H)

print 'eigenvalues:'
print val

print 'eigenvectors:'
print vec

# The canonical transformation matrix
A = np.array(
    [
        [1.0, -0.874501499843, 0.0, 0.0, -3.1249777835e-16, -0.317031074183, 0.381262220747, 0.0, 0.0, -1.35692983329],
        [0.0, 1.32844001491, 0.0, 0.0, 2.05714802924e-16, -0.525804984232, -1.85291834615, 0.0, 0.0, -0.313168220671],
        [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, -0.371839016677, 0.0, 0.0],
        [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, -0.371839016677, 0.0],
        [0.0, 0.0, 0.0, 0.0, 1.0, 0.681268130721, 0.000668895022923, 0.0, 0.0, 1.26802753367],
        [0.0, 0.0, 0.0, 0.0, 0.0, 1.43547059724, -0.755503568227, 0.0, 0.0, 1.10477126661],
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.32083678231, 0.0, 0.0, 0.431649298038],
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.06689467818, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.06689467818, 0.0],
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.75271804336]
    ],
    dtype=np.double

)

vec_trans = A.dot(vec)

print 'eigenvectors (transformed)'
print vec_trans
